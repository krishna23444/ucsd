digraph state_machine {

  start [label="START\n \
done=0\n \
count=0\n \
i=0\n \
j=seed_lsw[7:0]\n \
port_A_addr=0\n \
for k=0 to 255: sbox[k]=k\n \
for k=0 to 3: seed[k]=seed_lsw[8*k+7:8*k]\n \
for k=0 to 3: seed[k+4]=seed_msw[8*k+7:8*k]"]
  start -> construct_sbox [label="start_encrypt=1"]

  construct_sbox [label="CONSTRUCT_SBOX\n \
sbox[i]=sbox[j]\n \
sbox[j]=sbox[i]\n \
i=i+1"]
  construct_sbox -> start [label="nreset=0"]
  construct_sbox -> initialize_encryption [label="i=255"]
  construct_sbox -> construct_sbox_compute_j

  construct_sbox_compute_j [label="CONSTRUCT_SBOX_COMPUTE_j\n \
j=(j+sbox[i]+seed[i%8])%256"]
  construct_sbox_compute_j -> start [label="nreset=0"]
  construct_sbox_compute_j -> construct_sbox

  initialize_encryption [label="INITIALIZE_ENCRYPTION\n \
i=1\n \
j=sbox[1]%256"]
  initialize_encryption -> start [label="nreset=0"]
  initialize_encryption -> read_word

  read_word [label="READ_WORD\n \
port_A_we=0\n \
port_A_addr=plain_addr+count\n \
byte_count=0"]
  read_word -> start [label="nreset=0"]
  read_word -> done [label="count>=frame_size"]
  read_word -> encrypt_byte_swap

  encrypt_byte_swap [label="ENCRYPT_BYTE_SWAP\n \
sbox[i]=sbox[j]\n \
sbox[j]=sbox[i]\n \
index=(sbox[i]+sbox[j])%256\n \
i=(i+1)%256"]
  encrypt_byte_swap -> start [label="nreset=0"]
  encrypt_byte_swap -> write_word [label="count+byte_count>=frame_size"]
  encrypt_byte_swap -> encrypt_byte

  encrypt_byte [label="ENCRYPT_BYTE\n \
byte_count=byte_count+1\n \
if byte_count == 0: port_A_data_in[7:0]=sbox[index]^port_A_data_out[7:0]\n \
                    port_A_data_in[31:8]=port_A_data_out[31:8]\n \
if byte_count == 1: port_A_data_in[15:8]=sbox[index]^port_A_data_out[15:8]\n \
if byte_count == 2: port_A_data_in[23:16]=sbox[index]^port_A_data_out[23:16]\n \
if byte_count == 3: port_A_data_in[31:24]=sbox[index]^port_A_data_out[31:24]\n \
j=(j+sbox[i])%256\n \
"]
  encrypt_byte -> start [label="nreset=0"]
  encrypt_byte -> write_word [label="byte_count=3"]
  encrypt_byte -> encrypt_byte_swap

  write_word [label="WRITE_WORD\n \
port_A_we=1\n \
port_A_addr=cipher_addr+count\n \
count=count+4"]
  write_word -> start [label="nreset=0"]
  write_word -> read_word

  done [label="DONE\n \
done=1"]
  done -> start
}
