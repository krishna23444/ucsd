{-- This is helper code to convert a string to an integer	--}
{-- You may remove  if you like 				--}
declare function toInt( $s as onyx.types.String) as onyx.types.Integer {
if ($s = "") then 0 else integer($s) };

declare function getDescendantOrSelfByTagName( $node, $tagname ) as onyx.types.Sequence {
  if( tagname($node) = $tagname )
  then
    $node
  else
    ()
  ,
  if( isENode($node) )
  then
    for $child in children($node)
      return getDescendantOrSelfByTagName( $child, $tagname )
  else
    ()
};

declare function getChildrenByTagName( $node, $tagname ) as onyx.types.Sequence {
   if( isENode( $node ) )
   then
      for $child in children($node)
         where tagname($child) = $tagname
           return $child
   else
      ()
};

{-- Query begins here --}
{-- Do not modify the next line --}
let $d := document("/home/linux/ieng6/cs131w/public/Materials/A4/xmlFiles/book.xml")
  let $books := getDescendantOrSelfByTagName($d, "book")
    for $book in $books
      let $authors := getDescendantOrSelfByTagName($book, "author")
        for $author in $authors
          let $lastname := getChildrenByTagName($author, "last")
            where "2000" = getAttributeValue(getAttrEnv($book), "year")
                return $lastname 
