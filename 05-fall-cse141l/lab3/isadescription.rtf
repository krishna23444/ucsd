{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f37\froman\fcharset238\fprq2 Times New Roman CE;}{\f38\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f40\froman\fcharset161\fprq2 Times New Roman Greek;}{\f41\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f42\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f43\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f44\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f45\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f47\fswiss\fcharset238\fprq2 Arial CE;}{\f48\fswiss\fcharset204\fprq2 Arial Cyr;}{\f50\fswiss\fcharset161\fprq2 Arial Greek;}{\f51\fswiss\fcharset162\fprq2 Arial Tur;}{\f52\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f53\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f54\fswiss\fcharset186\fprq2 Arial Baltic;}{\f55\fswiss\fcharset163\fprq2 Arial (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\rsidtbl \rsid856642\rsid1192123
\rsid1269958\rsid1318692\rsid1585156\rsid1594602\rsid1795742\rsid1968272\rsid2438029\rsid3564499\rsid4279308\rsid4736718\rsid4923938\rsid5203786\rsid5587404\rsid7545804\rsid7569074\rsid8330462\rsid10316177\rsid10968811\rsid11362321\rsid11500464
\rsid11605207\rsid12608332\rsid12979489\rsid13238388\rsid13577324\rsid13659520\rsid13906047\rsid14105269\rsid14231320\rsid14564785\rsid14748950\rsid15469075\rsid15992446\rsid16142065}{\*\generator Microsoft Word 11.0.6359;}{\info{\author njoffe}
{\operator njoffe}{\creatim\yr2005\mo11\dy15\hr9\min52}{\revtim\yr2005\mo11\dy15\hr11\min44}{\version33}{\edmins111}{\nofpages2}{\nofwords751}{\nofchars4283}{\*\company University of California, San Diego}{\nofcharsws5024}{\vern24703}}
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale100\nolnhtadjtbl\rsidroot5203786 \fet0\sectd 
\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid15469075 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\ul\insrsid15469075 Insruction Set Architechture (ISA)}{\f1\fs20\ul\insrsid1192123 
\par }{\f1\fs20\ul\insrsid7545804 
\par }{\f1\fs20\insrsid4279308 Our 8-bit processor\rquote s ISA has 8 registers, requiring 3 bit}{\f1\fs20\insrsid13577324 s to address any given register. The first four registers, numbered 0 through 3, are general purpose registers named $r0 through $r3
. A lot of the commands have some 2-bit operands because of the limited instruction size, these 2-bit operands address only the general purpose registers mentioned. The next three registers, numbered 4 through 6, are $zero, $one, and $
three. These registers cannot be written to and always read the value specified by their name. The $zero and $one registers are very useful in a lot of assembly programming, while the $three register is very special to our applicati
on because of the way the data memory is laid out for us. The last register, number 7, named $res, is used as a default location to write to and as an accumulator for the mean program. Operations where we can\rquote t easily specify a l
ocation to write to, or it simply doesn\rquote t matter where the result is written, usually write to $res.
\par 
\par There are }{\f1\fs20\insrsid4279308 18 different instructions. Initially we used opcodes to separate different types of instructions, but after a couple rounds of optimization we had to break this structure because each subgroup of commands
 defined by an opcode would have holes where we could fill in more commands rather than having one grand hole.}{\f1\fs20\insrsid11605207  All of the instructions take two, one, or no operands. 
Since there is no room in the 8-bit instruction to specify where results get written to, we }{\f1\fs20\insrsid10316177 decided that all our instructions either write to $re
s, or write to the first register argument as long as it can be written to, otherwise write to the second argument. This means, for example that }{\f1\fs20\insrsid13659520 the command }{\f1\fs20\insrsid10316177 \'93add $r0, $r1\'94
 stores its result in $r0, wh}{\f1\fs20\insrsid13659520 ile}{\f1\fs20\insrsid10316177  }{\f1\fs20\insrsid13659520 the command }{\f1\fs20\insrsid10316177 \'93add $one, $r3\'94 stores its result in $r3. }{\f1\fs20\insrsid13659520 
\par }{\f1\fs20\insrsid14748950 
\par }{\f1\fs20\insrsid4736718 Because of the known nature of the data our programs will be receiving, we were able to optimize our programs by removing }{\f1\fs20\insrsid1968272 complicated, }{\f1\fs20\insrsid4736718 gen}{\f1\fs20\insrsid1968272 
eral math operations like shift}{\f1\fs20\insrsid4736718  and replacing them }{\f1\fs20\insrsid1968272 with specialized operations like shift-right-logical-by-4, shift-right-logical-by-3, shift-left-logical-by-4, etc. 
These commands take a single register argument which they both read from and write to.}{\f1\fs20\insrsid4736718 
\par }{\f1\fs20\insrsid1968272 
\par }{\f1\fs20\insrsid14748950 The jump/branch instructions we used in our programs comprise of}{\f1\fs20\insrsid13659520  branch-on-less-than and branch-on-greater-than-or-equal-to. After running through our assembly programs, we noticed that these logically
 opposite conditionals are always used together in the \'93negative logic test before entering a loop, positive logic test at the end of the loop\'94 paradigm 
in the same manner. In other words, we noticed that branch-less-than always jumped backwards, while branch-greater-than-or-equal-to always jumped forward, so we optimized our ISA by specifically imposing this restriction on these branches.
\par }{\f1\fs20\insrsid7569074 
\par Memory operations in our design do not take any offsets, they simply write the second register argument to the 
first register argument, but do it with memory. After looking through our programs, we noticed that a lot of the memory operations had to do with loading/storing from two sequential memory operations at a time (like the bubble sort in the median program).
 To optimize for this we added load-next and store-next instructions which add one to the memory address being read from or written before executing the memory instruction.
\par }{\f1\fs20\insrsid13906047 
\par We used the one bit flag output of the ALU to find out when an addition overflows (effectively to store the 9th bit of the addition operation), and to know when a subtraction is less than zero. 
For both the addition and subtraction commands, this effectively means tying the flag to the carry-out of the operation. The flag bit is always used right after it is set, so the rest of the commands (all those besides add/sub) 
write junk to the flag register or simply ignore it since we don\rquote t care what happens to it.}{\f1\fs20\insrsid12608332  The subtract command is used }{\f1\fs20\insrsid16142065 as}{\f1\fs20\insrsid12608332  the conditional }{\f1\fs20\insrsid16142065 
test }{\f1\fs20\insrsid12608332 portion of branches. Setting the flag to }{\f1\fs20\insrsid16142065 (result < 0) in the subtraction allows us to test for less than and greater than or equal to without requiring extra commands or logic. The addition flag}{
\f1\fs20\insrsid1594602  setting}{\f1\fs20\insrsid16142065  is used in the mean program in order to create a 16 bit buffer register for the sum out of one of the general purpose registers ($r0 - $r3) and the $res register. We created the v
ery specialized inch (increment high byte) command to add the flag bit with $res and store the result back to $res. }{\f1\fs20\insrsid11500464 Using this command after every successive addition in the mean program allows us to store
 a 2-byte (effectively a 16-bit accumulator) sum of all the values in the data memory.}{\f1\fs20\insrsid13906047 
\par }{\f1\fs20\insrsid11500464 
\par }{\f1\fs20\insrsid1269958 Note that none of our commands take non-register operands. We found that using $zero, $one, and $three along with clever register-to-register movements accomplishes everything our programs need to do.}{
\f1\fs20\insrsid15992446\charrsid15992446  }{\f1\fs20\insrsid15992446 This means we don\rquote t need commands to move a constant to a register, do math with a combination of registers and constants. Moreover, this simplifies our design because we don
\rquote t need specialized ALU and sign-extension logic to deal with numeric constants.}{\f1\fs20\insrsid11500464\charrsid4279308 
\par }}


