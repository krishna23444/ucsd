#!/usr/bin/perl -w -s

use strict;

#use lib $ENV{HOME} . "/mace/perl5";

use File::Basename;
use lib ((dirname($0) || "."), (dirname($0) || ".")."/../mace-extras/perl5");

use Mace::Util qw{:all};
use Mace::Compiler::MaceCompiler;
use Mace::Compiler::ClassCache;
use Carp;
use Cwd;

unless (scalar(@ARGV)) {
    die "usage: $0 file [classname]\n";
}

$SIG{__DIE__} = sub{ confess $_[0]; };
$SIG{__WARN__} = sub{ confess $_[0]; die; };

BEGIN {
  @main::global_variables = qw($Werror $Wall $Wunusual $Wnounusual $Wdeprecated $Wnodeprecated $Wundefined $Wnoundefined $Wunimplemented $Wnounimplemented);
}
use vars @main::global_variables;

$Mace::Compiler::Globals::suppressWarnings{unusual} = (($::Wall or $::Wunusual) and not $::Wnounusual) ? 0 : 1;
$Mace::Compiler::Globals::suppressWarnings{undefined} = ($::Wnoundefined) ? 1 : 0;
$Mace::Compiler::Globals::suppressWarnings{deprecated} = ($::Wnodeprecated) ? 1 : 0;
$Mace::Compiler::Globals::suppressWarnings{unimplemented} = ($::Wnounimplemented) ? 1 : 0;

use Mace::Compiler::Globals;
push @Mace::Compiler::Globals::INCLUDE_PATH, dirname($0)."/../services/interfaces", cwd();
$Mace::Compiler::Globals::NUM_WARN = 0;
$Mace::Compiler::Globals::NUM_ERROR = 0;

my $file = shift(@ARGV);

$Mace::Compiler::Globals::filename = $file;

open(IN, $file) or die "cannot open $file: $!\n";
my @in = <IN>;
close(IN);
my $in = join("", @in);

my $parser = Mace::Compiler::MaceCompiler->new();
my $sc = $parser->parse($in, $file);

if($Mace::Compiler::Globals::NUM_ERROR) {
  exit(1);
}

my $hfile;
my $hfilehandle;
open($hfilehandle, ">", \$hfile) or die;
$sc->printHFile($hfilehandle);
close($hfilehandle);

my $hfileindent = indentFileStr(\$hfile);

my $ccfile;
my $ccfilehandle;
open($ccfilehandle, ">", \$ccfile) or die;
$sc->printCCFile($ccfilehandle);
close($ccfilehandle);

my $ccfileindent = indentFileStr(\$ccfile);

my $inithfile;
my $inithfilehandle;
open($inithfilehandle, ">", \$inithfile) or die;
$sc->printInitHFile($inithfilehandle);
close($inithfilehandle);

my $inithfileindent = indentFileStr(\$inithfile);

my $initccfile;
my $initccfilehandle;
open($initccfilehandle, ">", \$initccfile) or die;
$sc->printInitCCFile($initccfilehandle);
close($initccfilehandle);

my $initccfileindent = indentFileStr(\$initccfile);

my $constantsfile;
my $constantsfilehandle;
open($constantsfilehandle, ">", \$constantsfile) or die;
$sc->printConstantsFile($constantsfilehandle);
close($constantsfilehandle);

my $constantsfileindent = indentFileStr(\$constantsfile);

my $macrosfile;
my $macrosfilehandle;
open($macrosfilehandle, ">", \$macrosfile) or die;
$sc->printMacrosFile($macrosfilehandle);
close($macrosfilehandle);

my $macrosfileindent = indentFileStr(\$macrosfile);

print "Parse Completed With $Mace::Compiler::Globals::NUM_WARN Warnings and $Mace::Compiler::Globals::NUM_ERROR Errors\n";

if($Mace::Compiler::Globals::NUM_ERROR) {
  exit(1);
}
if($Mace::Compiler::Globals::NUM_WARN && $::Werror ) {
  print "Treating warnings as errors!\n";
  exit(2);
}

my $basefile = $file;
$basefile =~ s/\..*//;

print "Printing returned header file!\n";
open (HFILE, ">", "$basefile.h") or die;
insertLine(\$hfileindent, "$basefile.h");
print HFILE $hfileindent;
close(HFILE);

print "Printing returned cc file!\n";
open(CCFILE, ">", "$basefile.cc") or die;
insertLine(\$ccfileindent, "$basefile.cc");
print CCFILE $ccfileindent;
close(CCFILE);

print "Printing returned init header file!\n";
open(INITHFILE, ">", "$basefile-init.h") or die;
insertLine(\$inithfileindent, "$basefile-init.h");
print INITHFILE $inithfileindent;
close(INITHFILE);

print "Printing returned init cc file!\n";
open(INITCCFILE, ">", "$basefile-init.cc") or die;
insertLine(\$initccfileindent, "$basefile-init.cc");
print INITCCFILE $initccfileindent;
close(INITCCFILE);

print "Printing returned constants file!\n";
open(CONSTANTSFILE, ">", "$basefile-constants.h") or die;
insertLine(\$constantsfileindent, "$basefile-constants.h");
print CONSTANTSFILE $constantsfileindent;
close(CONSTANTSFILE);

print "Printing returned macros file!\n";
open(MACROSFILE, ">", "$basefile-macros.h") or die;
insertLine(\$macrosfileindent, "$basefile-macros.h");
print MACROSFILE $macrosfileindent;
close(MACROSFILE);

print "Printing depfile!\n";
my $depfiles = join(" ", @Mace::Compiler::ClassCache::readFiles, values(%{$parser->parser()->{'local'}->{'mincludes'}}));
open(DEPFILE, ">", "$basefile.macdep") or die;
print DEPFILE <<END;
$basefile.h $basefile.cc $basefile-init.h $basefile-init.cc $basefile-constants.h $basefile-macros.h $basefile.macdep $basefile.mac.annotated : $depfiles
END
close(DEPFILE);

print "Printing annotated file!\n";
open(ANNOFILE, ">", "$basefile.mac.annotated") or die;
print ANNOFILE $sc->annotatedMacFile();
close(ANNOFILE);

sub indentFileStr {
  my $infile = shift;
  my $outfile = '';
  my $infilehandle;
  my $outfilehandle;

  open($infilehandle, "<", $infile) or die;
  open($outfilehandle, ">", \$outfile) or die;

  indentFile($infilehandle, $outfilehandle);

  close($infilehandle);
  close($outfilehandle);

  return $outfile;
}

sub insertLine {
  my $file = shift;
  my $filename = shift;

  my @lines = split /\n/, $$file;
  my $nextlineno = 2;
  for my $l (@lines) {
    if($l =~ m|^\s*// __INSERT_LINE_HERE__\s*$|) {
      $l = qq{#line $nextlineno "$filename"};
    }
    $nextlineno++;
  }
  $$file = join("\n", @lines)."\n";
}

