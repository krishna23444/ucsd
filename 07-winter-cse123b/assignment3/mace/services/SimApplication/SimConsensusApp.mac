service SimConsensusApp;

provides SimApplication;

trace = med;

services {
  Consensus c;
}

states {
  waiting;
  proposed;
  chosen;
}

constants {
  #include "mstring.h"
  mace::string SIM_KEY = "SIMAPP";
}

constructor_parameters {
  int numToPropose = 1;
}

method_remappings {
  uses {
    downcall_propose(const mace::string&, const int& -> const mace::string&);
  }
  implements {
    upcalls {
      notifyProposalCommitted(const mace::string&, const int& <- const mace::string&);
    }
  }
}

//auto_types {
//  ProposedValue {
//    int value;
//  }
//}

state_variables {
  int chosenValue = -1;
  timer retry;
}

transitions {

  //downcall eventsWaiting [ guards : (state == chosen || state == proposed) ] bool eventsWaiting()
  downcall (state == chosen || state == proposed) eventsWaiting() {
    return false;
  }
  //downcall eventsWaiting [ guards : (true) ] bool eventsWaiting()
  downcall eventsWaiting() {
    return true;
  }

  //downcall simulateEvent [ guards : (state == init) ] std::string simulateEvent()
  downcall (state == init) simulateEvent() {
    maceInit();
    if(upcall_getNodeNumber() < numToPropose) {
      state = waiting;
    } else {
      state = proposed;
    }
    return "maceInit";
  }

  //downcall simulateEvent [ guards : (state == waiting) ] std::string simulateEvent()
  downcall (state == waiting) simulateEvent() {
    downcall_propose(SIM_KEY, upcall_getNodeNumber());
    retry.schedule(5 SEC);
    state = proposed;
    return "propose";
  }

  //upcall notifyProposalCommitted [ guards : (true) ] void notifyProposalCommitted(mace::string const & key, int const & value)
  upcall notifyProposalCommitted(key, value) {
    ASSERT(key == SIM_KEY);
    ASSERT(chosenValue == -1);
    chosenValue = value;
  }
  
  //aspect transitionToChosen [ guards : (state == proposed && chosenValue != -1) ] void aspect_transitionToChosen(state_type const & oldstate, int const & oldvalue)
  aspect<chosenValue> (oldvalue == -1/* && chosenValue != -1*/) transitionToChosen(oldvalue) {
    state = chosen;
    retry.cancel();
  }

  //scheduler retry [ guards : (state == proposed) ] void expire_retry()
  scheduler (state == proposed) retry() {
    downcall_propose(SIM_KEY, upcall_getNodeNumber());
    retry.schedule(5 SEC);
  }

  upcall void notifyProposalAborted(mace::string const & key, mace::string const & value, registration_uid_t rid) { }

  upcall void notifyProposalNotChosen(mace::string const & key, mace::string const & value, registration_uid_t rid) { }
}

properties {
  safety {
    chosenConsistency : \forall n \in \nodes: n.state = chosen \implies n.chosenValue \neq -1;
    oneValueChosen : \forall n \in \nodes: {n.chosenValue = -1 \or \forall m \in \nodes : {m.chosenValue = -1 \or m.chosenValue = n.chosenValue}};
  }
  liveness {
    allNodesPastWaiting : \forall n \in \nodes : n.state = proposed \or n.state = chosen;
    someValueChosen : \exists n \in \nodes : n.state = chosen;
  }
}

