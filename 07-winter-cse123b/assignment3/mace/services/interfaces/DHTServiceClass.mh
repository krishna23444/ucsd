serviceclass DHT {
  virtual void containsKey(const MaceKey& key, bool& result, bool& waitForCallback);
  virtual void get(const MaceKey& key, mace::string& value, bool& found,
		   bool& waitForCallback);
  virtual void put(const MaceKey& key, const mace::string& value);
  virtual void remove(const MaceKey& key);

  handlers DHTData;
//   //NOTE: The following two functions will be inherited.  They will
//   //not be implemented by a thing providing DHTServiceClass.  

//   //NOTE: We should parse these, and generate only downcall methods
//   //for them. (i.e. not let people implement them).
//   void putSerializable(const MaceKey& key, const mace::Serializable& value) {
//     mace::string str;
//     value.serialize(str);
//     put(key, str, registrationUid);
//   }
//   //XXX: Was this what you wanted James?

//   // YES, but it is broken, because get is asynchronous...this will
//   // only work if waitForCallback is set false after the call
//   void getSerializable(const MaceKey& key, mace::Serializable& value, bool& found,
// 		       bool& waitForCallback) {
//     mace::string str;
//     get(key, str, found, waitForCallback, registrationUid);
//     istringstream stream(str);
//     value.deserialize(stream);
//   }
}; // DHTServiceClass

